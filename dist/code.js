(()=>{"use strict";async function e(e){var a,t;const n=[],r=await figma.variables.getLocalVariablesAsync(),o=await figma.variables.getLocalVariableCollectionsAsync();for(const s of e){const e=r.find((e=>e.name===s.name));if(e){const r=e.valuesByMode[Object.keys(e.valuesByMode)[0]];let l=!1;if("COLOR"===s.type&&"string"==typeof s.value){const e=i(s.value);l=JSON.stringify(r)!==JSON.stringify(e)}else l=JSON.stringify(r)!==JSON.stringify(s.value);l?n.push({name:s.name,type:"update",collection:e.variableCollectionId&&(null===(a=o.find((a=>a.id===e.variableCollectionId)))||void 0===a?void 0:a.name)||"Design Tokens"}):n.push({name:s.name,type:"unchanged",collection:e.variableCollectionId&&(null===(t=o.find((a=>a.id===e.variableCollectionId)))||void 0===t?void 0:t.name)||"Design Tokens"})}else n.push({name:s.name,type:"new",collection:"COLOR"===s.type?"Color Tokens":"Design Tokens"})}return n}async function a(e){let a=(await figma.variables.getLocalVariableCollectionsAsync()).find((a=>a.name===e));return a||(a=figma.variables.createVariableCollection(e)),a}function i(e){return{r:parseInt(e.slice(1,3),16)/255,g:parseInt(e.slice(3,5),16)/255,b:parseInt(e.slice(5,7),16)/255}}figma.showUI(__html__,{width:400,height:600,themeColors:!0}),figma.ui.onmessage=async t=>{if("create-variables"===t.type){const{variables:a}=t,i=await e(a);figma.ui.postMessage({type:"variable-updates",updates:i})}else"confirm-updates"===t.type?t.confirm&&await async function(t=[]){try{const n=await e(t),r=t.filter((e=>{const a=n.find((a=>a.name===e.name));return a&&"unchanged"!==a.type}));if(0===r.length)return void figma.notify("No changes to apply");const o=await a("Color Tokens"),s=await a("Design Tokens"),l=await figma.variables.getLocalVariablesAsync();for(const e of r)try{const a="COLOR"===e.type?o:s;let t;let n;switch(t=l.find((a=>a.name===e.name))||figma.variables.createVariable(e.name,a,e.type),e.type){case"COLOR":if("string"!=typeof e.value||!e.value.startsWith("#"))throw new Error(`Invalid color value: ${e.value}`);n=i(e.value);break;case"FLOAT":if("string"==typeof e.value){if(n=parseFloat(e.value),isNaN(n))throw new Error(`Invalid number value: ${e.value}`)}else n=e.value;break;case"BOOLEAN":n="string"==typeof e.value?"true"===e.value.toLowerCase():Boolean(e.value);break;default:n=String(e.value)}await t.setValueForMode(a.modes[0].modeId,n)}catch(a){throw console.error(`Error processing variable ${e.name}:`,a),new Error(`Error processing variable ${e.name}: ${a}`)}figma.notify("Variables updated successfully!")}catch(e){const a=e instanceof Error?e.message:"Unknown error occurred";throw figma.notify("Error updating variables: "+a,{error:!0}),e}}(t.variables):"resize"===t.type&&figma.ui.resize(t.width,t.height)},figma.ui.on("message",(e=>{"resize"===e.type&&figma.ui.resize(e.width,e.height)}))})();